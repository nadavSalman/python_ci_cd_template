# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI to Docker hub 

on:

  push:

    branches: [ master ]

  steps:

      -

        name: Login to DockerHub

        uses: docker/login-action@v1 

        with:

          username: ${{ secrets.DOCKER_HUB_USERNAME }}

          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      -

        name: Build and push

        id: docker_build

        uses: docker/build-push-action@v2

        with:

          context: ./

          file: ./Dockerfile

          push: true

          tags: bengotch/simplewhale:latest

      -

        name: Image digest

        run: echo ${{ steps.docker_build.outputs.digest }}

# name: Python package

# env:
#   GITHUB_SHA: ${{ github.sha }} 
#   GITHUB_REF: ${{ github.ref }} 
#   IMAGE: ci-cd-dev
#   REGISTRY_HOSTNAME: gcr.io

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
    
# jobs:
#   setup-build-publish-deploy:
#     name: Setup, Build, and Publish
#     runs-on: ubuntu-latest
#     steps:

#     - name: Checkout
#       uses: actions/checkout@v2
  
  
#     - name: Docker Login
#       # You may pin to the exact commit or the version.
#       # uses: docker/login-action@f3364599c6aa293cdc2b8391b1b56d0c30e45c8a
#       uses: docker/login-action@v1.8.0
#       with:
#         username: ${{ secrets.DOCKER_HUB_USERNAME }}
#         password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
     
     
     
#     - name: Login to gcloud registry
#       id: gcloud
#       uses: elgohr/gcloud-login-action@master
#       with:
#         version: '270.0.0'
#         account_key: ${{ secrets.GCR_KEY }} 
     
    
#     # Build the Docker image
#     - name: Build
#       run: |
#         export TAG=`echo $GITHUB_REF | awk -F/ '{print $NF}'`
#         echo $TAG
#         docker build -t "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG" \
#           --build-arg GITHUB_SHA="$GITHUB_SHA" \
#           --build-arg GITHUB_REF="$GITHUB_REF" .
    
#     # View images : 
#     - name: Docker images
#       run: |
#         docker images

    # Push the Docker image to Google Container Registry
#     - name: Publish
#       run: |
#         export TAG=`echo $GITHUB_REF | awk -F/ '{print $NF}'`
#         echo $TAG
#         docker push "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG"
#         docker tag "$REGISTRY_HOSTNAME"/"$IMAGE":"$TAG" "$REGISTRY_HOSTNAME"/"$IMAGE":latest
#         docker push "$REGISTRY_HOSTNAME"/"$IMAGE":latest

# jobs:
#   build:

#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: [3.9]
#         # python-version: [3.7, 3.8, 3.9]

#     steps:
#     - uses: actions/checkout@v2
#     - name: Set up Python ${{ matrix.python-version }}
#       uses: actions/setup-python@v2
#       with:
#         python-version: ${{ matrix.python-version }}
#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#         echo 'View install Packages >>>>'
#     - name: Lint with flake8
#       run: |
#         echo 'Lint in feature'
#         # stop the build if there are Python syntax errors or undefined names
#         # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#         # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
#     - name: Test with unittest 
#       run: |
#         echo 'Run tests'
#         echo 'Soon will be transfer to pytest'
#         python -m unittest -v
    
#   Docker-build-and-push:
# #     needs: build 
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         python-version: [3.9]
    
#     steps:
#       -
#         name: Set up QEMU
#         uses: docker/setup-qemu-action@v1
#       -
#         name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v1
#       -
#         name: Login to DockerHub
#         uses: docker/login-action@v1 
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       -
#         name: Build and push
#         id: docker_build
#         uses: docker/build-push-action@v2
#         with:
#           push: true
#           tags: nadavdevops/ool:1.0.0
#       -
#         name: Image digest
#         run: echo ${{ steps.docker_build.outputs.digest }}
    
# #     - uses: actions/checkout@v1
# #     - name: Login to DockerHub Registry
# #       run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

# #     - uses: actions/checkout@v2
# #     - uses: secrethub/actions/env-export@v0.2.1
     
# #     - name: source code checkout
# #       run: |
# #         pwd
# #         ls
        
        
        
        
# #     - name: Build and Push Docker Image
# #       uses: mr-smithers-excellent/docker-build-push@v4
# #       with:
# #         image: nadavdevops/ool
# #         registry: docker.io
# #         username: ${{ secrets.DOCKER_USERNAME }}
# #         password: ${{ secrets.DOCKER_PASSWORD }}

    
# #     - name: Publish to Registry
# #     - uses: mr-smithers-excellent/docker-build-push@v3
# #       with:
# #           image: nadavdevops/ool:ci-cd-pipline
# #           registry: docker.io
# #           username: ${{ secrets.DOCKER_USERNAME }}
# #           password: ${{ secrets.DOCKER_PASSWORD }}
      

