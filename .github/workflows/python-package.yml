# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python package

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
        # python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        echo 'View install Packages >>>>'
    - name: Lint with flake8
      run: |
        echo 'Lint in feature'
        # stop the build if there are Python syntax errors or undefined names
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest 
      run: |
        echo 'Run tests'
        echo 'Soon will be transfer to pytest'
        python -m unittest -v
    
  Docker-build-and-push:
    needs: build 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    
    steps:
#     - uses: actions/checkout@v2
    
#     - name: Docker Login
#       env:
#           DOCKER_USER: ${{ secrets.DOCKER_USER }}   
#           DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} 
#       # You may pin to the exact commit or the version.
#       # uses: docker/login-action@f3364599c6aa293cdc2b8391b1b56d0c30e45c8a
#       uses: docker/login-action@v1.8.0
#       with:
#         username: nadavdevops
#         password: $DOCKER_PASSWORD

    - name: docker-login
      env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}   
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} 
      run: |
          echo "login..."
          docker login --username nadavdevops --password $($DOCKER_PASSWORD)
          #echo $($DOCKER_PASSWORD) | docker login --username nadavdevops --password-stdin
          #docker login --username nadavdevops --password "$DOCKER_PASSWORD"
      

    - name: Dcoker build
      run: | 
        ls
        pwd
        docker --version
        docker build -t ci-cd-pipline:1.0.0 .
        docker images
